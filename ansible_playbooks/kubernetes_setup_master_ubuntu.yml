---
- hosts: master
  vars_files:
    - ../env_variables

  tasks:
    - name: Add Docker apt-key to repository
      apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present

    - name: Add Kubernetes apt-key to repository on Ubuntu
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present

    - name: Add Docker repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present
        filename: 'docker'

    - name: Add Kubernetes repository
      apt_repository:
        repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        filename: 'kubernetes'

    - name: Install required packages
      apt:
       name: "{{ ubuntu_packages }}"
       state: latest
       update_cache: yes

    - name: Install system updates
      apt:
        name: "*"
        state: latest
        update_cache: yes

    - name: Set firewall rules
      shell: |
        firewall-cmd --permanent --add-port=6443/tcp
        firewall-cmd --permanent --add-port=2379-2380/tcp
        firewall-cmd --permanent --add-port=10250/tcp
        firewall-cmd --permanent --add-port=10251/tcp
        firewall-cmd --permanent --add-port=10252/tcp
        firewall-cmd --permanent --add-port=10255/tcp
        firewall-cmd --reload
        modprobe br_netfilter
        echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

    - name: Restart master server
      shell: reboot
      async: 1
      poll: 0

    - name: Wait for server to restart
      local_action:
        module: wait_for
          host=k8s-master
          port=22
          delay=1
          timeout=700

    - name: Check connectivity
      ping:

    - name: Check docker is running
      shell: systemctl status docker | head -n 3 | tail -n 1 | awk '{ print $2 $3 }'
      register: docker_status

    - debug:
       msg:  "{{ docker_status.stdout }}"

    - name: Kubernetes cluster Initialization
      shell:
       cmd: kubeadm init --pod-network-cidr={{network_cid}}  --apiserver-advertise-address {{api_advertise_address}}

    - name: Generate token for workers joining
      shell: kubeadm token generate
      register: joining_token

    - name: Copying required files
      shell: |
        mkdir -p $HOME/.kube
        sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config

    - name: Deploy flanner network
      shell: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml